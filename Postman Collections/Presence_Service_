{
  "info": {
    "_postman_id": "5713101e-4ce0-470d-b5b6-b7f7c24bdde3",
    "name": "Presence Service #blueprint",
    "description": "# Concepts of accessing this service\n\nPresence service is currently accessible though this http api. The api exposes the `v1/report` endpoint to which the clients have to report the presence of the user. The client can report presence with or without elements. When presence is reported without elements, the default context is set to the team. The user is marked online in his/her team only.\nIf the elements are also included as a part of the request then the user is marked online in the context of all the elements as well as the team. (Make sure the entire element path is sent while reporting, i.e  If collection is included then the parent workspace also has to be included) \n\nThe response of each report contains a `nextReportBefore` (in milliseconds) property that instructs the clients when to report presence next. If the user is not reported on or before this time interval, then the service marks this user as offline and this user would not be presented to any other reporting user. \n\nWhen user reports the presence of self, then in response he will receive the `users` object  that contains all other users who are currently present in the reported element. When no element is provided in the request then the response contains presence of all users his team. \n\nNote: users could have been reporting from multiple devices, hence devices property of the user in the response may contain multiple keys of the ids of the devices and the time that it was lastReported.\n\n# What are elements?\nEntities in postman, such as individual workspaces, collections, environments, etc. As of version 1, only workspace and collections are supported.\n\n# What is a device?\nThe device or interface that the user is using to establish his presence in a particular room, to start of the user\u2019s postman-client.\n\n# Best practices of using the presence reporting APIs\n* The client is expected to report presence each and every time the user performs actions like switching workspace or viewing a collection, etc. which changes the element context.\n* If the user doesn\u2019t perform any context changing action within the next `nextReportBefore` milliseconds but he is still online then his presence needs to be reported before the timeout expires with the last known element context. (Say he opened collection C1 in W1 and has been working there since the last 1 minute, then C1 and W1 need to be reported again)\n\n# Mock\n\nhttps://69a9b765-a03f-4a2d-8a59-48381542acd8.mock.pstmn.io",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Usage",
      "item": [
        {
          "name": "Reporting a presence in a team",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "709e305a-e9a8-45ac-8e8f-d00f0929aa4c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Reponse has user objects\", function () {",
                  "    pm.expect(jsonData.users).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"user object have userId as key\", function () {",
                  "    pm.expect(jsonData.users).to.have.keys('3555598');",
                  "});",
                  "",
                  "pm.test('user object name properties', function () {",
                  "   pm.expect(jsonData.users['3555598']).to.have.property('name')",
                  "});",
                  "",
                  "pm.test('user object id properties', function () {",
                  "    pm.expect(jsonData.users['3555598']).to.have.property('id')",
                  "});",
                  "",
                  "pm.test('user object devices properties', function () {",
                  "    pm.expect(jsonData.users['3555598']).to.have.property('devices')",
                  "});",
                  "",
                  "pm.test(\"Reponse has nextReportBefore number\", function () {",
                  "    pm.expect(jsonData.nextReportBefore).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "_postman_id": "2ce9129b-d27b-4418-b006-e82233c874b6",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "X-Access-Token",
                "value": "{{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device\": {\n    \"id\": \"97876e3d-130f-4f11-865c-51a3387685b1\",\n    \"type\": \"app\",\n    \"viewId\": \"tab:ba50f85e06c\"\n  }\n}"
            },
            "url": "{{url}}/v1/report",
            "description": "## Policies\n\n1. isAuthenticated\n2. isUserPresentable - check if user belongs to a team (free users are not allowed as of now)\n3. isDeviceValid - check if deviceId is a valid uuid4\n\n## Device properties\n\n*id* - uuid for the device(app), uuid for browser(web) used by the user\n\n*type* - `app` or `web`\n\n*viewId* - id for the tab(web) or window(app) the user has opened"
          },
          "response": [
            {
              "id": "89e6930f-f9f3-49bf-a813-057eb1ecdd16",
              "name": "Reporting a presence",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"device\": {\n  \t\"id\": \"97876e3d-130f-4f11-865c-51a3387685b1\",\n    \"type\": \"app\",\n    \"viewId\": \"tab:ba50f85e06ce\"\n  }\n}"
                },
                "url": "{{url}}/v1/report"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"users\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": \"Loyd\",\n            \"devices\": {\n                \"11\": {\n                    \"id\": \"11\",\n                    \"lastReported\": 1519309070595\n                },\n                \"12\": {\n                    \"id\": \"12\",\n                    \"lastReported\": 1519309070400\n                }\n            }\n        },\n        \"2\": {\n            \"id\": 2,\n            \"name\": \"Marvin\",\n            \"devices\": {\n                \"21\": {\n                    \"id\": \"21\",\n                    \"lastReported\": 1519309233131\n                }\n            }\n        }\n    },\n    \"nextReportBefore\": 60000\n}"
            }
          ]
        },
        {
          "name": "Reporting presence in a workspace",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eca5abea-91d6-40ca-b028-3441a241ab4f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Reponse has user objects\", function () {",
                  "    pm.expect(jsonData.users).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"user object have userId as key\", function () {",
                  "    pm.expect(jsonData.users).to.have.keys('3555598');",
                  "});",
                  "",
                  "pm.test('user object name properties', function () {",
                  "   pm.expect(jsonData.users['3555598']).to.have.property('name')",
                  "});",
                  "",
                  "pm.test('user object id properties', function () {",
                  "    pm.expect(jsonData.users['3555598']).to.have.property('id')",
                  "});",
                  "",
                  "pm.test('user object devices properties', function () {",
                  "    pm.expect(jsonData.users['3555598']).to.have.property('devices')",
                  "});",
                  "",
                  "pm.test(\"Reponse has nextReportBefore number\", function () {",
                  "    pm.expect(jsonData.nextReportBefore).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "_postman_id": "23b3f2b2-2847-4580-868f-9408f07777bb",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "X-Access-Token",
                "value": "{{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device\": {\n    \"id\": \"97876e3d-130f-4f11-865c-51a3387685b1\",\n    \"type\": \"app\",\n    \"viewId\": \"tab:ba50f85e06ce\"\n  },\n  \"elements\": {\n    \"workspace\": \"d6b43394-34cd-4018-b7ec-de453b6c7f05\"\n  }\n}"
            },
            "url": "{{url}}/v1/report",
            "description": "## Policies\n\n1. isAuthenticated\n2. isUserPresentable - check if user belongs to a team (free users are not allowed as of now)\n3. isDeviceValid - check if deviceId is a valid uuid4\n4. isElementPathComplete - This makes sure that the entire path is provided in elements (Ex. Workspace, or Workspace->Collection) and not only collection\n\n## Device properties\n\n*id* - uuid for the device(app), uuid for browser(web) used by the user\n\n*type* - `app` or `web`\n\n*viewId* - id for the tab(web) or window(app) the user has opened\n\n\n## Elements\n\nObject containing the path where the user is present at"
          },
          "response": [
            {
              "id": "590cb96d-a48a-419c-b0c9-bf2e589457e9",
              "name": "Reporting from web",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"device\": {\n  \t\"id\": \"97876e3d-130f-4f11-865c-51a3387685b1\",\n    \"type\": \"app\",\n    \"viewId\": \"tab:ba50f85e06ce\"\n  },\n  \"elements\": {\n    \"workspace\": \"d6b43394-34cd-4018-b7ec-de453b6c7f05\",\n    \"collection\": \"6623-a4d321bf-1d77-4f07-9ae1-316aa2a53b37\"\n  }\n}"
                },
                "url": "{{url}}/v1/report"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"users\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": \"Loyd\",\n            \"devices\": {\n                \"11\": {\n                    \"id\": \"11\",\n                    \"lastReported\": 1519309070595\n                },\n                \"12\": {\n                    \"id\": \"12\",\n                    \"lastReported\": 1519309070400\n                }\n            }\n        },\n        \"2\": {\n            \"id\": 2,\n            \"name\": \"Marvin\",\n            \"devices\": {\n                \"21\": {\n                    \"id\": \"21\",\n                    \"lastReported\": 1519309233131\n                }\n            }\n        }\n    },\n    \"nextReportBefore\": 60000\n}"
            }
          ]
        },
        {
          "name": "Reporting presence in a collection in a workspace",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eca5abea-91d6-40ca-b028-3441a241ab4f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Reponse has user objects\", function () {",
                  "    pm.expect(jsonData.users).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"user object have userId as key\", function () {",
                  "    pm.expect(jsonData.users).to.have.keys('3555598');",
                  "});",
                  "",
                  "pm.test('user object name properties', function () {",
                  "   pm.expect(jsonData.users['3555598']).to.have.property('name')",
                  "});",
                  "",
                  "pm.test('user object id properties', function () {",
                  "    pm.expect(jsonData.users['3555598']).to.have.property('id')",
                  "});",
                  "",
                  "pm.test('user object devices properties', function () {",
                  "    pm.expect(jsonData.users['3555598']).to.have.property('devices')",
                  "});",
                  "",
                  "pm.test(\"Reponse has nextReportBefore number\", function () {",
                  "    pm.expect(jsonData.nextReportBefore).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "10525bb3-25c9-4d8b-a643-759c919c0fbb",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "X-Access-Token",
                "value": "{{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"device\": {\n    \"id\": \"97876e3d-130f-4f11-865c-51a3387685b1\",\n    \"type\": \"app\",\n    \"viewId\": \"tab:ba50f85e06ce\"\n  },\n  \"elements\": {\n    \"workspace\": \"d6b43394-34cd-4018-b7ec-de453b6c7f05\",\n    \"collection\": \"1-2360e0e1-4cdf-44f7-a098-30ea57bfeefd\"\n  }\n}"
            },
            "url": "{{url}}/v1/report",
            "description": "## Policies\n\n1. isAuthenticated\n2. isUserPresentable - check if user belongs to a team (free users are not allowed as of now)\n3. isDeviceValid - check if deviceId is a valid uuid4\n4. isElementPathComplete - This makes sure that the entire path is provided in elements (Ex. Workspace, or Workspace->Collection) and not only collection\n\n## Device properties\n\n*id* - uuid for the device(app), uuid for browser(web) used by the user\n\n*type* - `app` or `web`\n\n*viewId* - id for the tab(web) or window(app) the user has opened\n\n\n## Elements\n\nObject containing the path where the user is present at"
          },
          "response": [
            {
              "id": "08b66479-9773-4e38-8cad-40ff6c0796a6",
              "name": "Reporting from web",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"device\": {\n  \t\"id\": \"97876e3d-130f-4f11-865c-51a3387685b1\",\n    \"type\": \"app\",\n    \"viewId\": \"tab:ba50f85e06ce\"\n  },\n  \"elements\": {\n    \"workspace\": \"d6b43394-34cd-4018-b7ec-de453b6c7f05\",\n    \"collection\": \"6623-a4d321bf-1d77-4f07-9ae1-316aa2a53b37\"\n  }\n}"
                },
                "url": "{{url}}/v1/report"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"users\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": \"Loyd\",\n            \"devices\": {\n                \"11\": {\n                    \"id\": \"11\",\n                    \"lastReported\": 1519309070595\n                },\n                \"12\": {\n                    \"id\": \"12\",\n                    \"lastReported\": 1519309070400\n                }\n            }\n        },\n        \"2\": {\n            \"id\": 2,\n            \"name\": \"Marvin\",\n            \"devices\": {\n                \"21\": {\n                    \"id\": \"21\",\n                    \"lastReported\": 1519309233131\n                }\n            }\n        }\n    },\n    \"nextReportBefore\": 60000\n}"
            }
          ]
        }
      ],
      "_postman_id": "1a89d71d-6cda-428e-8883-75a57d6f4218"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "3981109a-4367-4891-9315-bfec6bd4896a",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "c9bfb123-2bdf-4779-b249-2c49de21a285",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}